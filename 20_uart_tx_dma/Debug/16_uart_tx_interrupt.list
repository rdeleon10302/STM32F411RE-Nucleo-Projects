
16_uart_tx_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003c4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800055c  0800055c  0000155c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800056c  0800056c  00001574  2**0
                  CONTENTS
  4 .ARM          00000000  0800056c  0800056c  00001574  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800056c  08000574  00001574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800056c  0800056c  0000156c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000570  08000570  00001570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000000  08000574  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08000574  00002120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001574  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c67  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000389  00000000  00000000  0000220b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c8  00000000  00000000  00002598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000008a  00000000  00000000  00002660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e9d7  00000000  00000000  000026ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000fd8  00000000  00000000  000110c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005368d  00000000  00000000  00012099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00065726  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000224  00000000  00000000  0006576c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00065990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000544 	.word	0x08000544

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000544 	.word	0x08000544

080001d8 <main>:
void uart2_tx_interrupt_init(void);
void uart2_send_byte(uint8_t byte);
void uart2_send_string(const char* str);

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	/*1.Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000210 <main+0x38>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000210 <main+0x38>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	@ 0x30

	/*2.Set PA5 as output pin*/
	GPIOA->MODER |= (1U<<10);
 80001e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000214 <main+0x3c>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a09      	ldr	r2, [pc, #36]	@ (8000214 <main+0x3c>)
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 80001f4:	4b07      	ldr	r3, [pc, #28]	@ (8000214 <main+0x3c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a06      	ldr	r2, [pc, #24]	@ (8000214 <main+0x3c>)
 80001fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80001fe:	6013      	str	r3, [r2, #0]

	// 3. Initialize UART2 for TX with interrupts
	uart2_tx_interrupt_init();
 8000200:	f000 f8b4 	bl	800036c <uart2_tx_interrupt_init>

	// 4. Example usage: Send a string
	uart2_send_string("Hello, World!\n");
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <main+0x40>)
 8000206:	f000 f83b 	bl	8000280 <uart2_send_string>
	while(1)
 800020a:	bf00      	nop
 800020c:	e7fd      	b.n	800020a <main+0x32>
 800020e:	bf00      	nop
 8000210:	40023800 	.word	0x40023800
 8000214:	40020000 	.word	0x40020000
 8000218:	0800055c 	.word	0x0800055c

0800021c <uart2_send_byte>:
	}

}

void uart2_send_byte(uint8_t byte)
{
 800021c:	b480      	push	{r7}
 800021e:	b085      	sub	sp, #20
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	71fb      	strb	r3, [r7, #7]
    uint16_t next_head = (tx_buffer_head + 1) % TX_BUFFER_SIZE;
 8000226:	4b12      	ldr	r3, [pc, #72]	@ (8000270 <uart2_send_byte+0x54>)
 8000228:	881b      	ldrh	r3, [r3, #0]
 800022a:	3301      	adds	r3, #1
 800022c:	425a      	negs	r2, r3
 800022e:	b2db      	uxtb	r3, r3
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	bf58      	it	pl
 8000234:	4253      	negpl	r3, r2
 8000236:	81fb      	strh	r3, [r7, #14]
    while (next_head == tx_buffer_tail)
 8000238:	bf00      	nop
 800023a:	4b0e      	ldr	r3, [pc, #56]	@ (8000274 <uart2_send_byte+0x58>)
 800023c:	881b      	ldrh	r3, [r3, #0]
 800023e:	89fa      	ldrh	r2, [r7, #14]
 8000240:	429a      	cmp	r2, r3
 8000242:	d0fa      	beq.n	800023a <uart2_send_byte+0x1e>
    {
        // Buffer is full, wait until space is available
    }
    tx_buffer[tx_buffer_head] = byte;
 8000244:	4b0a      	ldr	r3, [pc, #40]	@ (8000270 <uart2_send_byte+0x54>)
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	4619      	mov	r1, r3
 800024a:	4a0b      	ldr	r2, [pc, #44]	@ (8000278 <uart2_send_byte+0x5c>)
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	5453      	strb	r3, [r2, r1]
    tx_buffer_head = next_head;
 8000250:	4a07      	ldr	r2, [pc, #28]	@ (8000270 <uart2_send_byte+0x54>)
 8000252:	89fb      	ldrh	r3, [r7, #14]
 8000254:	8013      	strh	r3, [r2, #0]

    // Enable TXE interrupt if not already enabled
    USART2->CR1 |= USART_CR1_TXEIE;
 8000256:	4b09      	ldr	r3, [pc, #36]	@ (800027c <uart2_send_byte+0x60>)
 8000258:	68db      	ldr	r3, [r3, #12]
 800025a:	4a08      	ldr	r2, [pc, #32]	@ (800027c <uart2_send_byte+0x60>)
 800025c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000260:	60d3      	str	r3, [r2, #12]
}
 8000262:	bf00      	nop
 8000264:	3714      	adds	r7, #20
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	2000011c 	.word	0x2000011c
 8000274:	2000011e 	.word	0x2000011e
 8000278:	2000001c 	.word	0x2000001c
 800027c:	40004400 	.word	0x40004400

08000280 <uart2_send_string>:

void uart2_send_string(const char* str)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    while (*str)
 8000288:	e006      	b.n	8000298 <uart2_send_string+0x18>
    {
        uart2_send_byte((uint8_t)*str++);
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	1c5a      	adds	r2, r3, #1
 800028e:	607a      	str	r2, [r7, #4]
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	4618      	mov	r0, r3
 8000294:	f7ff ffc2 	bl	800021c <uart2_send_byte>
    while (*str)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d1f4      	bne.n	800028a <uart2_send_string+0xa>
    }
}
 80002a0:	bf00      	nop
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <tx_callback>:
static void tx_callback(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
    // Check if TXE (Transmit Data Register Empty) flag is set
    if (USART2->SR & USART_SR_TXE)
 80002b0:	4b14      	ldr	r3, [pc, #80]	@ (8000304 <tx_callback+0x58>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d01e      	beq.n	80002fa <tx_callback+0x4e>
    {
        // Check if there is data to send
        if (tx_buffer_head != tx_buffer_tail)
 80002bc:	4b12      	ldr	r3, [pc, #72]	@ (8000308 <tx_callback+0x5c>)
 80002be:	881a      	ldrh	r2, [r3, #0]
 80002c0:	4b12      	ldr	r3, [pc, #72]	@ (800030c <tx_callback+0x60>)
 80002c2:	881b      	ldrh	r3, [r3, #0]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d012      	beq.n	80002ee <tx_callback+0x42>
        {
            USART2->DR = tx_buffer[tx_buffer_tail];  // Send data
 80002c8:	4b10      	ldr	r3, [pc, #64]	@ (800030c <tx_callback+0x60>)
 80002ca:	881b      	ldrh	r3, [r3, #0]
 80002cc:	461a      	mov	r2, r3
 80002ce:	4b10      	ldr	r3, [pc, #64]	@ (8000310 <tx_callback+0x64>)
 80002d0:	5c9a      	ldrb	r2, [r3, r2]
 80002d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000304 <tx_callback+0x58>)
 80002d4:	605a      	str	r2, [r3, #4]
            tx_buffer_tail = (tx_buffer_tail + 1) % TX_BUFFER_SIZE;  // Update buffer index
 80002d6:	4b0d      	ldr	r3, [pc, #52]	@ (800030c <tx_callback+0x60>)
 80002d8:	881b      	ldrh	r3, [r3, #0]
 80002da:	3301      	adds	r3, #1
 80002dc:	425a      	negs	r2, r3
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	b2d2      	uxtb	r2, r2
 80002e2:	bf58      	it	pl
 80002e4:	4253      	negpl	r3, r2
 80002e6:	b29a      	uxth	r2, r3
 80002e8:	4b08      	ldr	r3, [pc, #32]	@ (800030c <tx_callback+0x60>)
 80002ea:	801a      	strh	r2, [r3, #0]
        {
            // Disable TXE interrupt if buffer is empty
            USART2->CR1 &= ~USART_CR1_TXEIE;
        }
    }
}
 80002ec:	e005      	b.n	80002fa <tx_callback+0x4e>
            USART2->CR1 &= ~USART_CR1_TXEIE;
 80002ee:	4b05      	ldr	r3, [pc, #20]	@ (8000304 <tx_callback+0x58>)
 80002f0:	68db      	ldr	r3, [r3, #12]
 80002f2:	4a04      	ldr	r2, [pc, #16]	@ (8000304 <tx_callback+0x58>)
 80002f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80002f8:	60d3      	str	r3, [r2, #12]
}
 80002fa:	bf00      	nop
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	40004400 	.word	0x40004400
 8000308:	2000011c 	.word	0x2000011c
 800030c:	2000011e 	.word	0x2000011e
 8000310:	2000001c 	.word	0x2000001c

08000314 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
    // Check if the TXE (Transmit Data Register Empty) flag is set
    if (USART2->SR & USART_SR_TXE)
 8000318:	4b04      	ldr	r3, [pc, #16]	@ (800032c <USART2_IRQHandler+0x18>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <USART2_IRQHandler+0x14>
    {
        // Call the static callback function to handle the TXE event
        tx_callback();
 8000324:	f7ff ffc2 	bl	80002ac <tx_callback>
    }
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	40004400 	.word	0x40004400

08000330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800033a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800033e:	2b00      	cmp	r3, #0
 8000340:	db0b      	blt.n	800035a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	f003 021f 	and.w	r2, r3, #31
 8000348:	4907      	ldr	r1, [pc, #28]	@ (8000368 <__NVIC_EnableIRQ+0x38>)
 800034a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034e:	095b      	lsrs	r3, r3, #5
 8000350:	2001      	movs	r0, #1
 8000352:	fa00 f202 	lsl.w	r2, r0, r2
 8000356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	e000e100 	.word	0xe000e100

0800036c <uart2_tx_interrupt_init>:


}

void uart2_tx_interrupt_init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	/****************Configure uart gpio pin***************/
	/*Enable clock access to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
 8000370:	4b36      	ldr	r3, [pc, #216]	@ (800044c <uart2_tx_interrupt_init+0xe0>)
 8000372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000374:	4a35      	ldr	r2, [pc, #212]	@ (800044c <uart2_tx_interrupt_init+0xe0>)
 8000376:	f043 0301 	orr.w	r3, r3, #1
 800037a:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 800037c:	4b34      	ldr	r3, [pc, #208]	@ (8000450 <uart2_tx_interrupt_init+0xe4>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a33      	ldr	r2, [pc, #204]	@ (8000450 <uart2_tx_interrupt_init+0xe4>)
 8000382:	f023 0310 	bic.w	r3, r3, #16
 8000386:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000388:	4b31      	ldr	r3, [pc, #196]	@ (8000450 <uart2_tx_interrupt_init+0xe4>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a30      	ldr	r2, [pc, #192]	@ (8000450 <uart2_tx_interrupt_init+0xe4>)
 800038e:	f043 0320 	orr.w	r3, r3, #32
 8000392:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (1U<<8);
 8000394:	4b2e      	ldr	r3, [pc, #184]	@ (8000450 <uart2_tx_interrupt_init+0xe4>)
 8000396:	6a1b      	ldr	r3, [r3, #32]
 8000398:	4a2d      	ldr	r2, [pc, #180]	@ (8000450 <uart2_tx_interrupt_init+0xe4>)
 800039a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800039e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80003a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000450 <uart2_tx_interrupt_init+0xe4>)
 80003a2:	6a1b      	ldr	r3, [r3, #32]
 80003a4:	4a2a      	ldr	r2, [pc, #168]	@ (8000450 <uart2_tx_interrupt_init+0xe4>)
 80003a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003aa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80003ac:	4b28      	ldr	r3, [pc, #160]	@ (8000450 <uart2_tx_interrupt_init+0xe4>)
 80003ae:	6a1b      	ldr	r3, [r3, #32]
 80003b0:	4a27      	ldr	r2, [pc, #156]	@ (8000450 <uart2_tx_interrupt_init+0xe4>)
 80003b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003b6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 80003b8:	4b25      	ldr	r3, [pc, #148]	@ (8000450 <uart2_tx_interrupt_init+0xe4>)
 80003ba:	6a1b      	ldr	r3, [r3, #32]
 80003bc:	4a24      	ldr	r2, [pc, #144]	@ (8000450 <uart2_tx_interrupt_init+0xe4>)
 80003be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80003c2:	6213      	str	r3, [r2, #32]


	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<6);
 80003c4:	4b22      	ldr	r3, [pc, #136]	@ (8000450 <uart2_tx_interrupt_init+0xe4>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a21      	ldr	r2, [pc, #132]	@ (8000450 <uart2_tx_interrupt_init+0xe4>)
 80003ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80003ce:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 80003d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000450 <uart2_tx_interrupt_init+0xe4>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a1e      	ldr	r2, [pc, #120]	@ (8000450 <uart2_tx_interrupt_init+0xe4>)
 80003d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003da:	6013      	str	r3, [r2, #0]

	/*Set PA3 alternate function type to UART_RX (AF07)*/
	GPIOA->AFR[0] |= (1U<<12);
 80003dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000450 <uart2_tx_interrupt_init+0xe4>)
 80003de:	6a1b      	ldr	r3, [r3, #32]
 80003e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000450 <uart2_tx_interrupt_init+0xe4>)
 80003e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003e6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 80003e8:	4b19      	ldr	r3, [pc, #100]	@ (8000450 <uart2_tx_interrupt_init+0xe4>)
 80003ea:	6a1b      	ldr	r3, [r3, #32]
 80003ec:	4a18      	ldr	r2, [pc, #96]	@ (8000450 <uart2_tx_interrupt_init+0xe4>)
 80003ee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003f2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 80003f4:	4b16      	ldr	r3, [pc, #88]	@ (8000450 <uart2_tx_interrupt_init+0xe4>)
 80003f6:	6a1b      	ldr	r3, [r3, #32]
 80003f8:	4a15      	ldr	r2, [pc, #84]	@ (8000450 <uart2_tx_interrupt_init+0xe4>)
 80003fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003fe:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 8000400:	4b13      	ldr	r3, [pc, #76]	@ (8000450 <uart2_tx_interrupt_init+0xe4>)
 8000402:	6a1b      	ldr	r3, [r3, #32]
 8000404:	4a12      	ldr	r2, [pc, #72]	@ (8000450 <uart2_tx_interrupt_init+0xe4>)
 8000406:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800040a:	6213      	str	r3, [r2, #32]



	/****************Configure uart module ***************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= UART2EN;
 800040c:	4b0f      	ldr	r3, [pc, #60]	@ (800044c <uart2_tx_interrupt_init+0xe0>)
 800040e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000410:	4a0e      	ldr	r2, [pc, #56]	@ (800044c <uart2_tx_interrupt_init+0xe0>)
 8000412:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000416:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 8000418:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800041c:	490d      	ldr	r1, [pc, #52]	@ (8000454 <uart2_tx_interrupt_init+0xe8>)
 800041e:	480e      	ldr	r0, [pc, #56]	@ (8000458 <uart2_tx_interrupt_init+0xec>)
 8000420:	f000 f81c 	bl	800045c <uart_set_baudrate>

	/*Configure the transfer direction*/
	 USART2->CR1 =  (CR1_TE | CR1_RE);
 8000424:	4b0c      	ldr	r3, [pc, #48]	@ (8000458 <uart2_tx_interrupt_init+0xec>)
 8000426:	220c      	movs	r2, #12
 8000428:	60da      	str	r2, [r3, #12]
	 /*Enable RXNE interrupt*/
	 USART2->CR1 |= CR1_TXEIE;
 800042a:	4b0b      	ldr	r3, [pc, #44]	@ (8000458 <uart2_tx_interrupt_init+0xec>)
 800042c:	68db      	ldr	r3, [r3, #12]
 800042e:	4a0a      	ldr	r2, [pc, #40]	@ (8000458 <uart2_tx_interrupt_init+0xec>)
 8000430:	f043 0320 	orr.w	r3, r3, #32
 8000434:	60d3      	str	r3, [r2, #12]

	 /*Enable UART interrupt in NVIC*/
	 NVIC_EnableIRQ(USART2_IRQn);
 8000436:	2026      	movs	r0, #38	@ 0x26
 8000438:	f7ff ff7a 	bl	8000330 <__NVIC_EnableIRQ>

	/*Enable uart module*/
	 USART2->CR1 |= CR1_UE;
 800043c:	4b06      	ldr	r3, [pc, #24]	@ (8000458 <uart2_tx_interrupt_init+0xec>)
 800043e:	68db      	ldr	r3, [r3, #12]
 8000440:	4a05      	ldr	r2, [pc, #20]	@ (8000458 <uart2_tx_interrupt_init+0xec>)
 8000442:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000446:	60d3      	str	r3, [r2, #12]


}
 8000448:	bf00      	nop
 800044a:	bd80      	pop	{r7, pc}
 800044c:	40023800 	.word	0x40023800
 8000450:	40020000 	.word	0x40020000
 8000454:	00f42400 	.word	0x00f42400
 8000458:	40004400 	.word	0x40004400

0800045c <uart_set_baudrate>:




static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	607a      	str	r2, [r7, #4]
	USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 8000468:	6879      	ldr	r1, [r7, #4]
 800046a:	68b8      	ldr	r0, [r7, #8]
 800046c:	f000 f808 	bl	8000480 <compute_uart_bd>
 8000470:	4603      	mov	r3, r0
 8000472:	461a      	mov	r2, r3
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	609a      	str	r2, [r3, #8]
}
 8000478:	bf00      	nop
 800047a:	3710      	adds	r7, #16
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}

08000480 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	085a      	lsrs	r2, r3, #1
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	441a      	add	r2, r3
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	fbb2 f3f3 	udiv	r3, r2, r3
 8000498:	b29b      	uxth	r3, r3
}
 800049a:	4618      	mov	r0, r3
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
	...

080004a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004a8:	480d      	ldr	r0, [pc, #52]	@ (80004e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004b0:	480c      	ldr	r0, [pc, #48]	@ (80004e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80004b2:	490d      	ldr	r1, [pc, #52]	@ (80004e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004b4:	4a0d      	ldr	r2, [pc, #52]	@ (80004ec <LoopForever+0xe>)
  movs r3, #0
 80004b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b8:	e002      	b.n	80004c0 <LoopCopyDataInit>

080004ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004be:	3304      	adds	r3, #4

080004c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c4:	d3f9      	bcc.n	80004ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004c6:	4a0a      	ldr	r2, [pc, #40]	@ (80004f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004c8:	4c0a      	ldr	r4, [pc, #40]	@ (80004f4 <LoopForever+0x16>)
  movs r3, #0
 80004ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004cc:	e001      	b.n	80004d2 <LoopFillZerobss>

080004ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d0:	3204      	adds	r2, #4

080004d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d4:	d3fb      	bcc.n	80004ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004d6:	f000 f811 	bl	80004fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004da:	f7ff fe7d 	bl	80001d8 <main>

080004de <LoopForever>:

LoopForever:
  b LoopForever
 80004de:	e7fe      	b.n	80004de <LoopForever>
  ldr   r0, =_estack
 80004e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004ec:	08000574 	.word	0x08000574
  ldr r2, =_sbss
 80004f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004f4:	20000120 	.word	0x20000120

080004f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004f8:	e7fe      	b.n	80004f8 <ADC_IRQHandler>
	...

080004fc <__libc_init_array>:
 80004fc:	b570      	push	{r4, r5, r6, lr}
 80004fe:	4d0d      	ldr	r5, [pc, #52]	@ (8000534 <__libc_init_array+0x38>)
 8000500:	4c0d      	ldr	r4, [pc, #52]	@ (8000538 <__libc_init_array+0x3c>)
 8000502:	1b64      	subs	r4, r4, r5
 8000504:	10a4      	asrs	r4, r4, #2
 8000506:	2600      	movs	r6, #0
 8000508:	42a6      	cmp	r6, r4
 800050a:	d109      	bne.n	8000520 <__libc_init_array+0x24>
 800050c:	4d0b      	ldr	r5, [pc, #44]	@ (800053c <__libc_init_array+0x40>)
 800050e:	4c0c      	ldr	r4, [pc, #48]	@ (8000540 <__libc_init_array+0x44>)
 8000510:	f000 f818 	bl	8000544 <_init>
 8000514:	1b64      	subs	r4, r4, r5
 8000516:	10a4      	asrs	r4, r4, #2
 8000518:	2600      	movs	r6, #0
 800051a:	42a6      	cmp	r6, r4
 800051c:	d105      	bne.n	800052a <__libc_init_array+0x2e>
 800051e:	bd70      	pop	{r4, r5, r6, pc}
 8000520:	f855 3b04 	ldr.w	r3, [r5], #4
 8000524:	4798      	blx	r3
 8000526:	3601      	adds	r6, #1
 8000528:	e7ee      	b.n	8000508 <__libc_init_array+0xc>
 800052a:	f855 3b04 	ldr.w	r3, [r5], #4
 800052e:	4798      	blx	r3
 8000530:	3601      	adds	r6, #1
 8000532:	e7f2      	b.n	800051a <__libc_init_array+0x1e>
 8000534:	0800056c 	.word	0x0800056c
 8000538:	0800056c 	.word	0x0800056c
 800053c:	0800056c 	.word	0x0800056c
 8000540:	08000570 	.word	0x08000570

08000544 <_init>:
 8000544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000546:	bf00      	nop
 8000548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800054a:	bc08      	pop	{r3}
 800054c:	469e      	mov	lr, r3
 800054e:	4770      	bx	lr

08000550 <_fini>:
 8000550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000552:	bf00      	nop
 8000554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000556:	bc08      	pop	{r3}
 8000558:	469e      	mov	lr, r3
 800055a:	4770      	bx	lr
