
20_uart_tx_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000364  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080004fc  080004fc  000014fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800051c  0800051c  00001524  2**0
                  CONTENTS
  4 .ARM          00000000  0800051c  0800051c  00001524  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800051c  08000524  00001524  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800051c  0800051c  0000151c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000520  08000520  00001520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001524  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000524  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000524  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ce7  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003ba  00000000  00000000  0000223b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  000025f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000085  00000000  00000000  000026b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ea1c  00000000  00000000  0000273d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ff9  00000000  00000000  00011159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005373e  00000000  00000000  00012152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00065890  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000204  00000000  00000000  000658d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00065ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080004e4 	.word	0x080004e4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080004e4 	.word	0x080004e4

080001d8 <main>:

static void dma_callback(void);


int main(void)
{
 80001d8:	b5b0      	push	{r4, r5, r7, lr}
 80001da:	b088      	sub	sp, #32
 80001dc:	af00      	add	r7, sp, #0

	char message[31] = "Hello from Stm32 DMA transfer\n\r";
 80001de:	4b14      	ldr	r3, [pc, #80]	@ (8000230 <main+0x58>)
 80001e0:	463c      	mov	r4, r7
 80001e2:	461d      	mov	r5, r3
 80001e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80001ec:	c407      	stmia	r4!, {r0, r1, r2}
 80001ee:	8023      	strh	r3, [r4, #0]
 80001f0:	3402      	adds	r4, #2
 80001f2:	0c1b      	lsrs	r3, r3, #16
 80001f4:	7023      	strb	r3, [r4, #0]

	/*1.Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80001f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000234 <main+0x5c>)
 80001f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000234 <main+0x5c>)
 80001fc:	f043 0301 	orr.w	r3, r3, #1
 8000200:	6313      	str	r3, [r2, #48]	@ 0x30

	/*2.Set PA5 as output pin*/
	GPIOA->MODER |= (1U<<10);
 8000202:	4b0d      	ldr	r3, [pc, #52]	@ (8000238 <main+0x60>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a0c      	ldr	r2, [pc, #48]	@ (8000238 <main+0x60>)
 8000208:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800020c:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 800020e:	4b0a      	ldr	r3, [pc, #40]	@ (8000238 <main+0x60>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a09      	ldr	r2, [pc, #36]	@ (8000238 <main+0x60>)
 8000214:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000218:	6013      	str	r3, [r2, #0]


	uart2_tx_init();
 800021a:	f000 f8a3 	bl	8000364 <uart2_tx_init>
	dma1_stream6_init((uint32_t) message, (uint32_t)&USART2->DR,31);
 800021e:	463b      	mov	r3, r7
 8000220:	221f      	movs	r2, #31
 8000222:	4906      	ldr	r1, [pc, #24]	@ (800023c <main+0x64>)
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f829 	bl	800027c <dma1_stream6_init>



	while(1)
 800022a:	bf00      	nop
 800022c:	e7fd      	b.n	800022a <main+0x52>
 800022e:	bf00      	nop
 8000230:	080004fc 	.word	0x080004fc
 8000234:	40023800 	.word	0x40023800
 8000238:	40020000 	.word	0x40020000
 800023c:	40004404 	.word	0x40004404

08000240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	4603      	mov	r3, r0
 8000248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800024a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024e:	2b00      	cmp	r3, #0
 8000250:	db0b      	blt.n	800026a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	f003 021f 	and.w	r2, r3, #31
 8000258:	4907      	ldr	r1, [pc, #28]	@ (8000278 <__NVIC_EnableIRQ+0x38>)
 800025a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	2001      	movs	r0, #1
 8000262:	fa00 f202 	lsl.w	r2, r0, r2
 8000266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800026a:	bf00      	nop
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	e000e100 	.word	0xe000e100

0800027c <dma1_stream6_init>:
	uart2_write(ch);
	return ch;
}

void dma1_stream6_init(uint32_t src, uint32_t dst, uint32_t len)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0
 8000282:	60f8      	str	r0, [r7, #12]
 8000284:	60b9      	str	r1, [r7, #8]
 8000286:	607a      	str	r2, [r7, #4]
	/*Enable clock access to DMA*/
	RCC->AHB1ENR |=DMA1EN;
 8000288:	4b32      	ldr	r3, [pc, #200]	@ (8000354 <dma1_stream6_init+0xd8>)
 800028a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800028c:	4a31      	ldr	r2, [pc, #196]	@ (8000354 <dma1_stream6_init+0xd8>)
 800028e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000292:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Disable DMA1 Stream6*/
	DMA1_Stream6->CR &=~DMA_CR_EN;
 8000294:	4b30      	ldr	r3, [pc, #192]	@ (8000358 <dma1_stream6_init+0xdc>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a2f      	ldr	r2, [pc, #188]	@ (8000358 <dma1_stream6_init+0xdc>)
 800029a:	f023 0301 	bic.w	r3, r3, #1
 800029e:	6013      	str	r3, [r2, #0]

    /*Wait until DMA1 Stream 6 is disabled */
    while(DMA1_Stream6->CR & DMA_CR_EN){}
 80002a0:	bf00      	nop
 80002a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000358 <dma1_stream6_init+0xdc>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f003 0301 	and.w	r3, r3, #1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d1f9      	bne.n	80002a2 <dma1_stream6_init+0x26>

	/*Clear all interrupt flags of Stream6*/

	DMA1->HIFCR |=(1U<<16);
 80002ae:	4b2b      	ldr	r3, [pc, #172]	@ (800035c <dma1_stream6_init+0xe0>)
 80002b0:	68db      	ldr	r3, [r3, #12]
 80002b2:	4a2a      	ldr	r2, [pc, #168]	@ (800035c <dma1_stream6_init+0xe0>)
 80002b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80002b8:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR |=(1U<<18);
 80002ba:	4b28      	ldr	r3, [pc, #160]	@ (800035c <dma1_stream6_init+0xe0>)
 80002bc:	68db      	ldr	r3, [r3, #12]
 80002be:	4a27      	ldr	r2, [pc, #156]	@ (800035c <dma1_stream6_init+0xe0>)
 80002c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80002c4:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR |=(1U<<19);
 80002c6:	4b25      	ldr	r3, [pc, #148]	@ (800035c <dma1_stream6_init+0xe0>)
 80002c8:	68db      	ldr	r3, [r3, #12]
 80002ca:	4a24      	ldr	r2, [pc, #144]	@ (800035c <dma1_stream6_init+0xe0>)
 80002cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80002d0:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR |=(1U<<20);
 80002d2:	4b22      	ldr	r3, [pc, #136]	@ (800035c <dma1_stream6_init+0xe0>)
 80002d4:	68db      	ldr	r3, [r3, #12]
 80002d6:	4a21      	ldr	r2, [pc, #132]	@ (800035c <dma1_stream6_init+0xe0>)
 80002d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002dc:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR |=(1U<<21);
 80002de:	4b1f      	ldr	r3, [pc, #124]	@ (800035c <dma1_stream6_init+0xe0>)
 80002e0:	68db      	ldr	r3, [r3, #12]
 80002e2:	4a1e      	ldr	r2, [pc, #120]	@ (800035c <dma1_stream6_init+0xe0>)
 80002e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002e8:	60d3      	str	r3, [r2, #12]


	/*Set the destination buffer*/
	DMA1_Stream6->PAR = dst;
 80002ea:	4a1b      	ldr	r2, [pc, #108]	@ (8000358 <dma1_stream6_init+0xdc>)
 80002ec:	68bb      	ldr	r3, [r7, #8]
 80002ee:	6093      	str	r3, [r2, #8]

	/*Set the source buffer*/
	DMA1_Stream6->M0AR = src;
 80002f0:	4a19      	ldr	r2, [pc, #100]	@ (8000358 <dma1_stream6_init+0xdc>)
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	60d3      	str	r3, [r2, #12]

	/*Set length*/
	DMA1_Stream6->NDTR = len;
 80002f6:	4a18      	ldr	r2, [pc, #96]	@ (8000358 <dma1_stream6_init+0xdc>)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	6053      	str	r3, [r2, #4]

	/*Select Stream6 CH4*/
	DMA1_Stream6->CR = CHSEL4;
 80002fc:	4b16      	ldr	r3, [pc, #88]	@ (8000358 <dma1_stream6_init+0xdc>)
 80002fe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000302:	601a      	str	r2, [r3, #0]

	/*Enable memory increment*/
	DMA1_Stream6->CR |= DMA_MEM_INC;
 8000304:	4b14      	ldr	r3, [pc, #80]	@ (8000358 <dma1_stream6_init+0xdc>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a13      	ldr	r2, [pc, #76]	@ (8000358 <dma1_stream6_init+0xdc>)
 800030a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800030e:	6013      	str	r3, [r2, #0]

	/*Configure transfer direction*/
	DMA1_Stream6->CR |= DMA_DIR_MEM_TO_PERIPH;
 8000310:	4b11      	ldr	r3, [pc, #68]	@ (8000358 <dma1_stream6_init+0xdc>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a10      	ldr	r2, [pc, #64]	@ (8000358 <dma1_stream6_init+0xdc>)
 8000316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800031a:	6013      	str	r3, [r2, #0]

	/*Enable DMA transfer complete interrupt*/
	DMA1_Stream6->CR |=DMA_CR_TCIE;
 800031c:	4b0e      	ldr	r3, [pc, #56]	@ (8000358 <dma1_stream6_init+0xdc>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a0d      	ldr	r2, [pc, #52]	@ (8000358 <dma1_stream6_init+0xdc>)
 8000322:	f043 0310 	orr.w	r3, r3, #16
 8000326:	6013      	str	r3, [r2, #0]

	/*Enable direct mode and disable FIFO*/
	DMA1_Stream6->FCR = 0;
 8000328:	4b0b      	ldr	r3, [pc, #44]	@ (8000358 <dma1_stream6_init+0xdc>)
 800032a:	2200      	movs	r2, #0
 800032c:	615a      	str	r2, [r3, #20]

	/*Enable DMA1 Stream6*/
	DMA1_Stream6->CR |=DMA_CR_EN;
 800032e:	4b0a      	ldr	r3, [pc, #40]	@ (8000358 <dma1_stream6_init+0xdc>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a09      	ldr	r2, [pc, #36]	@ (8000358 <dma1_stream6_init+0xdc>)
 8000334:	f043 0301 	orr.w	r3, r3, #1
 8000338:	6013      	str	r3, [r2, #0]

	/*Enable UART2 transmitter DMA*/
	USART2->CR3 |=UART_CR3_DMAT;
 800033a:	4b09      	ldr	r3, [pc, #36]	@ (8000360 <dma1_stream6_init+0xe4>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	4a08      	ldr	r2, [pc, #32]	@ (8000360 <dma1_stream6_init+0xe4>)
 8000340:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000344:	6153      	str	r3, [r2, #20]

	/*DMA Interrupt enable in NVIC*/
	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000346:	2011      	movs	r0, #17
 8000348:	f7ff ff7a 	bl	8000240 <__NVIC_EnableIRQ>


}
 800034c:	bf00      	nop
 800034e:	3710      	adds	r7, #16
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	40023800 	.word	0x40023800
 8000358:	400260a0 	.word	0x400260a0
 800035c:	40026000 	.word	0x40026000
 8000360:	40004400 	.word	0x40004400

08000364 <uart2_tx_init>:
}



void uart2_tx_init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	/****************Configure uart gpio pin***************/
	/*Enable clock access to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
 8000368:	4b20      	ldr	r3, [pc, #128]	@ (80003ec <uart2_tx_init+0x88>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036c:	4a1f      	ldr	r2, [pc, #124]	@ (80003ec <uart2_tx_init+0x88>)
 800036e:	f043 0301 	orr.w	r3, r3, #1
 8000372:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8000374:	4b1e      	ldr	r3, [pc, #120]	@ (80003f0 <uart2_tx_init+0x8c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a1d      	ldr	r2, [pc, #116]	@ (80003f0 <uart2_tx_init+0x8c>)
 800037a:	f023 0310 	bic.w	r3, r3, #16
 800037e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000380:	4b1b      	ldr	r3, [pc, #108]	@ (80003f0 <uart2_tx_init+0x8c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a1a      	ldr	r2, [pc, #104]	@ (80003f0 <uart2_tx_init+0x8c>)
 8000386:	f043 0320 	orr.w	r3, r3, #32
 800038a:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0] |= (1U<<8);
 800038c:	4b18      	ldr	r3, [pc, #96]	@ (80003f0 <uart2_tx_init+0x8c>)
 800038e:	6a1b      	ldr	r3, [r3, #32]
 8000390:	4a17      	ldr	r2, [pc, #92]	@ (80003f0 <uart2_tx_init+0x8c>)
 8000392:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000396:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 8000398:	4b15      	ldr	r3, [pc, #84]	@ (80003f0 <uart2_tx_init+0x8c>)
 800039a:	6a1b      	ldr	r3, [r3, #32]
 800039c:	4a14      	ldr	r2, [pc, #80]	@ (80003f0 <uart2_tx_init+0x8c>)
 800039e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003a2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80003a4:	4b12      	ldr	r3, [pc, #72]	@ (80003f0 <uart2_tx_init+0x8c>)
 80003a6:	6a1b      	ldr	r3, [r3, #32]
 80003a8:	4a11      	ldr	r2, [pc, #68]	@ (80003f0 <uart2_tx_init+0x8c>)
 80003aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003ae:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 80003b0:	4b0f      	ldr	r3, [pc, #60]	@ (80003f0 <uart2_tx_init+0x8c>)
 80003b2:	6a1b      	ldr	r3, [r3, #32]
 80003b4:	4a0e      	ldr	r2, [pc, #56]	@ (80003f0 <uart2_tx_init+0x8c>)
 80003b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80003ba:	6213      	str	r3, [r2, #32]


	/****************Configure uart module ***************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= UART2EN;
 80003bc:	4b0b      	ldr	r3, [pc, #44]	@ (80003ec <uart2_tx_init+0x88>)
 80003be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003c0:	4a0a      	ldr	r2, [pc, #40]	@ (80003ec <uart2_tx_init+0x88>)
 80003c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003c6:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 80003c8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80003cc:	4909      	ldr	r1, [pc, #36]	@ (80003f4 <uart2_tx_init+0x90>)
 80003ce:	480a      	ldr	r0, [pc, #40]	@ (80003f8 <uart2_tx_init+0x94>)
 80003d0:	f000 f814 	bl	80003fc <uart_set_baudrate>

	/*Configure the transfer direction*/
	 USART2->CR1 =  CR1_TE;
 80003d4:	4b08      	ldr	r3, [pc, #32]	@ (80003f8 <uart2_tx_init+0x94>)
 80003d6:	2208      	movs	r2, #8
 80003d8:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	 USART2->CR1 |= CR1_UE;
 80003da:	4b07      	ldr	r3, [pc, #28]	@ (80003f8 <uart2_tx_init+0x94>)
 80003dc:	68db      	ldr	r3, [r3, #12]
 80003de:	4a06      	ldr	r2, [pc, #24]	@ (80003f8 <uart2_tx_init+0x94>)
 80003e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003e4:	60d3      	str	r3, [r2, #12]


}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40023800 	.word	0x40023800
 80003f0:	40020000 	.word	0x40020000
 80003f4:	00f42400 	.word	0x00f42400
 80003f8:	40004400 	.word	0x40004400

080003fc <uart_set_baudrate>:




static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	60b9      	str	r1, [r7, #8]
 8000406:	607a      	str	r2, [r7, #4]
	USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 8000408:	6879      	ldr	r1, [r7, #4]
 800040a:	68b8      	ldr	r0, [r7, #8]
 800040c:	f000 f808 	bl	8000420 <compute_uart_bd>
 8000410:	4603      	mov	r3, r0
 8000412:	461a      	mov	r2, r3
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	609a      	str	r2, [r3, #8]
}
 8000418:	bf00      	nop
 800041a:	3710      	adds	r7, #16
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	085a      	lsrs	r2, r3, #1
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	441a      	add	r2, r3
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	fbb2 f3f3 	udiv	r3, r2, r3
 8000438:	b29b      	uxth	r3, r3
}
 800043a:	4618      	mov	r0, r3
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
	...

08000448 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000448:	480d      	ldr	r0, [pc, #52]	@ (8000480 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800044a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800044c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000450:	480c      	ldr	r0, [pc, #48]	@ (8000484 <LoopForever+0x6>)
  ldr r1, =_edata
 8000452:	490d      	ldr	r1, [pc, #52]	@ (8000488 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000454:	4a0d      	ldr	r2, [pc, #52]	@ (800048c <LoopForever+0xe>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000458:	e002      	b.n	8000460 <LoopCopyDataInit>

0800045a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800045c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045e:	3304      	adds	r3, #4

08000460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000464:	d3f9      	bcc.n	800045a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000466:	4a0a      	ldr	r2, [pc, #40]	@ (8000490 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000468:	4c0a      	ldr	r4, [pc, #40]	@ (8000494 <LoopForever+0x16>)
  movs r3, #0
 800046a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800046c:	e001      	b.n	8000472 <LoopFillZerobss>

0800046e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000470:	3204      	adds	r2, #4

08000472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000474:	d3fb      	bcc.n	800046e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000476:	f000 f811 	bl	800049c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800047a:	f7ff fead 	bl	80001d8 <main>

0800047e <LoopForever>:

LoopForever:
  b LoopForever
 800047e:	e7fe      	b.n	800047e <LoopForever>
  ldr   r0, =_estack
 8000480:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000488:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800048c:	08000524 	.word	0x08000524
  ldr r2, =_sbss
 8000490:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000494:	2000001c 	.word	0x2000001c

08000498 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000498:	e7fe      	b.n	8000498 <ADC_IRQHandler>
	...

0800049c <__libc_init_array>:
 800049c:	b570      	push	{r4, r5, r6, lr}
 800049e:	4d0d      	ldr	r5, [pc, #52]	@ (80004d4 <__libc_init_array+0x38>)
 80004a0:	4c0d      	ldr	r4, [pc, #52]	@ (80004d8 <__libc_init_array+0x3c>)
 80004a2:	1b64      	subs	r4, r4, r5
 80004a4:	10a4      	asrs	r4, r4, #2
 80004a6:	2600      	movs	r6, #0
 80004a8:	42a6      	cmp	r6, r4
 80004aa:	d109      	bne.n	80004c0 <__libc_init_array+0x24>
 80004ac:	4d0b      	ldr	r5, [pc, #44]	@ (80004dc <__libc_init_array+0x40>)
 80004ae:	4c0c      	ldr	r4, [pc, #48]	@ (80004e0 <__libc_init_array+0x44>)
 80004b0:	f000 f818 	bl	80004e4 <_init>
 80004b4:	1b64      	subs	r4, r4, r5
 80004b6:	10a4      	asrs	r4, r4, #2
 80004b8:	2600      	movs	r6, #0
 80004ba:	42a6      	cmp	r6, r4
 80004bc:	d105      	bne.n	80004ca <__libc_init_array+0x2e>
 80004be:	bd70      	pop	{r4, r5, r6, pc}
 80004c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004c4:	4798      	blx	r3
 80004c6:	3601      	adds	r6, #1
 80004c8:	e7ee      	b.n	80004a8 <__libc_init_array+0xc>
 80004ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ce:	4798      	blx	r3
 80004d0:	3601      	adds	r6, #1
 80004d2:	e7f2      	b.n	80004ba <__libc_init_array+0x1e>
 80004d4:	0800051c 	.word	0x0800051c
 80004d8:	0800051c 	.word	0x0800051c
 80004dc:	0800051c 	.word	0x0800051c
 80004e0:	08000520 	.word	0x08000520

080004e4 <_init>:
 80004e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e6:	bf00      	nop
 80004e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ea:	bc08      	pop	{r3}
 80004ec:	469e      	mov	lr, r3
 80004ee:	4770      	bx	lr

080004f0 <_fini>:
 80004f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f2:	bf00      	nop
 80004f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f6:	bc08      	pop	{r3}
 80004f8:	469e      	mov	lr, r3
 80004fa:	4770      	bx	lr
